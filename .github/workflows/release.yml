name: Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  process-commit:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Extract current version numbers
          VERSION_PARTS=(${LATEST_TAG//./ })
          MAJOR=${VERSION_PARTS[0]#v}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]:-0}
          
          # Check commit message for version increments
          if git log -1 --pretty=%B | grep -i "version bump"; then
            NEW_VERSION="v$((MAJOR + 1)).0"
          elif git log -1 --pretty=%B | grep -i "minor bump"; then
            NEW_VERSION="v$MAJOR.$((MINOR + 1)).0"
          elif git log -1 --pretty=%B | grep -i "patch"; then
            NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
          else
            NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          echo "Previous version: $LATEST_TAG\n New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create Release
        run: |
          gh release create "${{ steps.version.outputs.new_version }}" \
            --title "Release ${{ steps.version.outputs.new_version }}" --draft \
            --notes "Anbu - Latest (Version: ${{ steps.version.outputs.new_version }})" \
            --target ${{ github.sha }}
        env:
          GH_TOKEN: ${{ github.token }}

  build:
    needs: process-commit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build Binary
        run: |
            GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
              go build -ldflags="-s -w -X github.com/tanq16/anbu/cmd.AnbuVersion=${{ needs.process-commit.outputs.version }}" \
              -o anbu${{ matrix.os == 'windows' && '.exe' || '' }} .
            zip -r anbu-${{ matrix.os }}-${{ matrix.arch }}.zip \
              anbu${{ matrix.os == 'windows' && '.exe' || '' }} README.md LICENSE

      - name: Upload Release Asset
        run: |
          gh release upload "${{ needs.process-commit.outputs.version }}" \
            "anbu-${{ matrix.os }}-${{ matrix.arch }}.zip" --clobber
        env:
          GH_TOKEN: ${{ github.token }}

  publish:
    needs: [process-commit, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Publish Release
        run: |
          gh release edit "${{ needs.process-commit.outputs.version }}" --draft=false
        env:
          GH_TOKEN: ${{ github.token }}
